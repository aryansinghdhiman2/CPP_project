CREATE TABLE CLUB (CLUB_NAME VARCHAR(20) CONSTRAINT CLUB_NAME_NN NOT NULL,
                    CONVENER VARCHAR(20) CONSTRAINT CLUB_CONVENER_NN NOT NULL,
                    S_MEDIA VARCHAR(20),
                    CLUB_DESCRIPTION VARCHAR(50) CONSTRAINT CLUB_DESCRIPTION_NN NOT NULL,
                    CONSTRAINT CLUB_NAME_PK PRIMARY KEY(CLUB_NAME)
                    );
/
CREATE TABLE CO_CONVENER(CO_NAME VARCHAR(20),
                            C_NAME VARCHAR(20),
                            CONSTRAINT CO_CONVENER_NAME_FK FOREIGN KEY(C_NAME) REFERENCES CLUB(CLUB_NAME),
                            CONSTRAINT CO_CONV_CO_NAME_PK PRIMARY KEY(CO_NAME,C_NAME)
                            );
/
CREATE TABLE RECRUITMENT(C_NAME VARCHAR(20),
                        R_DATE TIMESTAMP,
                        VENUE VARCHAR(30) CONSTRAINT RECRUITMENT_VENUE_NN NOT NULL,
                        CONSTRAINT RECRUITMENT_PK PRIMARY KEY(C_NAME,R_DATE),
                        CONSTRAINT RECRUITMENT_CNAME_FK FOREIGN KEY(C_NAME) REFERENCES CLUB(CLUB_NAME)
                        );
/
CREATE TABLE MEETING(C_NAME VARCHAR(20),
                    M_DATE TIMESTAMP,
                    VENUE VARCHAR(30) CONSTRAINT MEETING_VENUE_NN NOT NULL,
                    DESCRIPTION VARCHAR(50) CONSTRAINT MEETING_DESC_NN NOT NULL,
                    CONSTRAINT MEETING_PK PRIMARY KEY(C_NAME,M_DATE),
                    CONSTRAINT MEETING_CNAME_FK FOREIGN KEY(C_NAME) REFERENCES CLUB(CLUB_NAME)
                    );
/
CREATE TABLE EVENT(E_ID NUMBER,
                    E_NAME VARCHAR(20) CONSTRAINT EVENT_NAME_NN NOT NULL,
                    E_DATE TIMESTAMP,
                    VENUE VARCHAR(30) CONSTRAINT EVENT_VENUE_NN NOT NULL,
                    DESCRIPTION VARCHAR(50) CONSTRAINT EVENT_DESC_NN NOT NULL,
                    C_NAME VARCHAR(20),
                    CONSTRAINT EVENT_PK PRIMARY KEY(E_ID,E_DATE),
                    CONSTRAINT EVENT_C_NAME_FK FOREIGN KEY(C_NAME) REFERENCES CLUB(CLUB_NAME)
                    );
/
CREATE SEQUENCE EVENT_SEQ
    START WITH 1
    NOMAXVALUE
    NOCYCLE
    ORDER;
/
CREATE INDEX RECRUITMENT_IDX ON RECRUITMENT(R_DATE);
CREATE INDEX MEETING_IDX ON MEETING(M_DATE);
CREATE INDEX EVENT_IDX ON EVENT(E_DATE);
/
-- DROP TABLE MEETING;
-- DROP TABLE EVENT;
/
CREATE TABLE AUDIT_TRAIL_CLUB(ACTION VARCHAR(10) CONSTRAINT AT_CLUB_ACTION_NN NOT NULL,
                                DATE_TIME TIMESTAMP CONSTRAINT AT_CLUB_DATE_TIME_NN NOT NULL,
                                CLUB_NAME VARCHAR(20),
                                CONVENER VARCHAR(20),
                                S_MEDIA VARCHAR(20),
                                CLUB_DESCRIPTION VARCHAR(50)
                                );
/
CREATE TABLE AUDIT_TRAIL_CO_CONVENER(ACTION VARCHAR(10) CONSTRAINT AT_CC_ACTION_NN NOT NULL,
                                DATE_TIME TIMESTAMP CONSTRAINT AT_CC_DATE_TIME_NN NOT NULL,
                                CO_NAME VARCHAR(20),
                                C_NAME VARCHAR(20)
                                );
/
CREATE TABLE AUDIT_TRAIL_RECRUITMENT(ACTION VARCHAR(10) CONSTRAINT AT_RECRUIT_ACTION_NN NOT NULL,
                                DATE_TIME TIMESTAMP CONSTRAINT AT_RECRUIT_DATE_TIME_NN NOT NULL,
                                C_NAME VARCHAR(20),
                                R_DATE TIMESTAMP,
                                VENUE VARCHAR(30)
                                );
/
CREATE TABLE AUDIT_TRAIL_MEETING(ACTION VARCHAR(10) CONSTRAINT AT_MEETING_ACTION_NN NOT NULL,
                                DATE_TIME TIMESTAMP CONSTRAINT AT_MEETING_DATE_TIME_NN NOT NULL,
                                C_NAME VARCHAR(20),
                                M_DATE TIMESTAMP,
                                VENUE VARCHAR(30)
                                );
/
CREATE TABLE AUDIT_TRAIL_EVENT(ACTION VARCHAR(10) CONSTRAINT AT_EVENT_ACTION_NN NOT NULL,
                                DATE_TIME TIMESTAMP CONSTRAINT AT_EVENT_DATE_TIME_NN NOT NULL,
                                E_ID NUMBER,
                                E_NAME VARCHAR(20),
                                E_DATE TIMESTAMP,
                                VENUE VARCHAR(30),
                                DESCRIPTION VARCHAR(50),
                                C_NAME VARCHAR(20)
                                );
/
CREATE OR REPLACE TRIGGER CLUB_CAP
    BEFORE
    INSERT OR UPDATE OF CLUB_NAME ON CLUB
    FOR EACH ROW
    BEGIN
    :NEW.CLUB_NAME := INITCAP(:NEW.CLUB_NAME);
END CLUB_CAP;
/
CREATE OR REPLACE TRIGGER TRAIL_CLUB
    AFTER
    INSERT OR UPDATE OR DELETE ON CLUB
    FOR EACH ROW
    DECLARE
        ACT AUDIT_TRAIL_CLUB.ACTION%TYPE;
    BEGIN
        IF INSERTING THEN ACT := 'INSERT';
        ELSIF UPDATING THEN ACT:='UPDATE';
        ELSE ACT:= 'DELETE';
        END IF;
        INSERT INTO AUDIT_TRAIL_CLUB VALUES(ACT,
                                SYSTIMESTAMP,
                                :OLD.CLUB_NAME,
                                :OLD.CONVENER,
                                :OLD.S_MEDIA,
                                :OLD.CLUB_DESCRIPTION);
END TRAIL_CLUB;
/
CREATE OR REPLACE TRIGGER TRAIL_CO_CONV
    AFTER
    INSERT OR UPDATE OR DELETE ON CO_CONVENER
    FOR EACH ROW
    DECLARE
        ACT AUDIT_TRAIL_CO_CONVENER.ACTION%TYPE;
    BEGIN
        IF INSERTING THEN ACT := 'INSERT';
        ELSIF UPDATING THEN ACT:='UPDATE';
        ELSE ACT:= 'DELETE';
        END IF;
        INSERT INTO AUDIT_TRAIL_CO_CONVENER VALUES(ACT,
                                SYSTIMESTAMP,
                                :OLD.C_NAME,
                                :OLD.CO_NAME);
END TRAIL_CO_CONV;
/
CREATE OR REPLACE TRIGGER TRAIL_RECRUITMENT 
    AFTER
    INSERT OR UPDATE OR DELETE ON RECRUITMENT
    FOR EACH ROW
    DECLARE
        ACT AUDIT_TRAIL_RECRUITMENT.ACTION%TYPE;
    BEGIN
        IF INSERTING THEN ACT := 'INSERT';
        ELSIF UPDATING THEN ACT:='UPDATE';
        ELSE ACT:= 'DELETE';
        END IF;
        INSERT INTO AUDIT_TRAIL_RECRUITMENT VALUES(ACT,
                                SYSTIMESTAMP,
                                :OLD.C_NAME,
                                :OLD.R_DATE,
                                :OLD.VENUE);
END TRAIL_RECRUITMENT;
/
CREATE OR REPLACE TRIGGER TRAIL_MEETING 
    AFTER
    INSERT OR UPDATE OR DELETE ON MEETING
    FOR EACH ROW
    DECLARE
        ACT AUDIT_TRAIL_MEETING.ACTION%TYPE;
    BEGIN
        IF INSERTING THEN ACT := 'INSERT';
        ELSIF UPDATING THEN ACT:='UPDATE';
        ELSE ACT:= 'DELETE';
        END IF;
        INSERT INTO AUDIT_TRAIL_MEETING VALUES(ACT,
                                SYSTIMESTAMP,
                                :OLD.C_NAME,
                                :OLD.M_DATE,
                                :OLD.VENUE);
END TRAIL_MEETING;
/
CREATE OR REPLACE TRIGGER TRAIL_EVENT
    AFTER
    INSERT OR UPDATE OR DELETE ON EVENT
    FOR EACH ROW
    DECLARE
        ACT AUDIT_TRAIL_EVENT.ACTION%TYPE;
    BEGIN
        IF INSERTING THEN ACT := 'INSERT';
        ELSIF UPDATING THEN ACT:='UPDATE';
        ELSE ACT:= 'DELETE';
        END IF;
        INSERT INTO AUDIT_TRAIL_EVENT VALUES(ACT,
                                SYSTIMESTAMP,
                                :OLD.E_ID,
                                :OLD.E_NAME,
                                :OLD.E_DATE,
                                :OLD.VENUE,
                                :OLD.DESCRIPTION,
                                :OLD.C_NAME);
END TRAIL_EVENT;
/
CREATE OR REPLACE PACKAGE CLUB_PACK
FUNCTION INSERT_CLUB(CLUB_NAME VARCHAR,CONVENER VARCHAR,S_MEDIA VARCHAR,CLUB_DESCRIPTION) RETURN BOOLEAN;
FUNCTION INSERT_CO_CONVENER(CO_NAME VARCHAR,C_NAME VARCHAR) RETURN BOOLEAN;
FUNCTION INSERT_RECRUITMENT(C_NAME VARCHAR,R_DATE TIMESTAMP,VENUE VARCHAR) RETURN BOOLEAN;
FUNCTION INSERT_MEETING(C_NAME VARCHAR(20),M_DATE TIMESTAMP,VENUE VARCHAR) RETURN BOOLEAN;
FUNCTION INSERT_EVENT(E_NAME VARCHAR,E_DATE TIMESTAMP,VENUE VARCHAR,DESCRIPTION VARCHAR,C_NAME VARCHAR) RETURN BOOLEAN;
--TO ADD MORE
END CLUB_PACK;
